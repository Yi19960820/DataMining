def majorCount(labelList, weight):
    x = sum(weight[labelList == -1]) / sum(weight)
    y = sum(weight[labelList == 1]) / sum(weight)
    if x >= y:
        return -1
    else:
        return 1

def majorCount(labelList):
    x = len(labelList[labelList == -1])
    y = len(labelList[labelList == 1])
    if x >= y:
        return -1
    else:
        return 1


正在载入数据 0
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正确率： [ 0.78571429  0.64285714  0.85714286  0.60714286  0.75        0.71428571
  0.64285714  0.75        0.75        0.82142857]
平均值： 0.732142857143 标准差： 0.077013780903
正在载入数据 1
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正在使用随机森林算法训练分类器：
正确率： [ 0.84  0.67  0.79  0.78  0.78  0.66  0.71  0.8   0.75  0.79]
平均值： 0.757 标准差： 0.0558659108939



正在载入数据 0
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正确率： [ 0.92857143  0.78571429  0.89285714  0.71428571  0.75        0.75
  0.82142857  0.82142857  0.89285714  0.96428571]
平均值： 0.832142857143 标准差： 0.0799393903057
正在载入数据 1
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正在使用adaboost算法训练分类器
正确率： [ 0.9   0.85  0.87  0.84  0.84  0.78  0.82  0.79  0.84  0.83]
平均值： 0.836 标准差： 0.0332264954517